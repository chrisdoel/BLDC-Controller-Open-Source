#define _DISABLE_ARDUINO_TIMER0_INTERRUPT_HANDLER_

#include <Arduino.h>
#include <wiring.c>

//H3 = D3
#define H3Pwm OCR2B
//H2 = D10
#define H2Pwm OCR1B
//H1 = D5
#define H1Pwm OCR0B

//L3 = D11
#define L3Pwm OCR2A
//L2 = D9
#define L2Pwm OCR1A
//L1 = D6
#define L1Pwm OCR0A


#define EN PORTD2
//A3 = HALL3 = PORTC3
#define SENSE3 PORTC3
//A2 = HALL2 = PORTC2
#define SENSE2 PORTC2
//A1 = HALL1 = PORTC1
#define SENSE1 PORTC1

#define lowMax 0x00
#define lowMin 0xFF

#define highMax 0xFF
#define highMin 0x00

#define UNKNOWN 0x02

enum {RISE = 1, FALL = 0};
bool riseOrFall = RISE;
uint8_t BEMFPhase = SENSE3;
uint8_t previousState = UNKNOWN;

bool hasRisen = 0;
bool hasFallen = 0;
uint32_t commutationStartTime = 0;
uint32_t timer = 0;

uint8_t commutation = 0;
bool running = 0;

int throttle = 0;
uint8_t pwmVal = 0;
uint8_t deadtime = 4;
uint8_t brake = 0;//240;



void Prep1H2LBEMF(){
  hasFallen = 0;
  hasRisen = 0;
  TIMSK0 |= (1 << TOIE0); //Enable TOV0 interrupt for sampling BEMF
  previousState = UNKNOWN;
  BEMFPhase = SENSE3;

  TIMSK1 &= ~(1 << TOIE1); //Disable any other interrupts
  TIMSK2 &= ~(1 << TOIE2);
  timer++;
  Serial.println("prep 1");
}

void Prep1H3LBEMF(){
  hasFallen = 0;
  hasRisen = 0;
  TIMSK0 |= (1 << TOIE0); //Enable TOV0 interrupt for sampling BEMF
  previousState = UNKNOWN;
  BEMFPhase = SENSE2;

  TIMSK1 &= ~(1 << TOIE1); //Disable any other interrupts
  TIMSK2 &= ~(1 << TOIE2);
  timer++;
  Serial.println("prep 2");
}

void Prep2H3LBEMF(){
  hasFallen = 0;
  hasRisen = 0;
  TIMSK1 |= (1 << TOIE1); //Enable TOV1 interrupt for sampling BEMF
  previousState = UNKNOWN;
  BEMFPhase = SENSE1;

  TIMSK0 &= ~(1 << TOIE0); //Disable any other interrupts
  TIMSK2 &= ~(1 << TOIE2);
  timer++;
  Serial.println("prep 3");
}

void Prep2H1LBEMF(){
  hasFallen = 0;
  hasRisen = 0;
  TIMSK1 |= (1 << TOIE1); //Enable TOV1 interrupt for sampling BEMF
  previousState = UNKNOWN;
  BEMFPhase = SENSE3;

  TIMSK0 &= ~(1 << TOIE0); //Disable any other interrupts
  TIMSK2 &= ~(1 << TOIE2);
  timer++;
  Serial.println("prep 4");
}

void Prep3H1LBEMF(){
  hasFallen = 0;
  hasRisen = 0;
  TIMSK2 |= (1 << TOIE2); //Enable TOV2 interrupt for sampling BEMF
  previousState = UNKNOWN;
  BEMFPhase = SENSE2;

  TIMSK0 &= ~(1 << TOIE0); //Disable any other interrupts
  TIMSK1 &= ~(1 << TOIE1);
  timer++;
  Serial.println("prep 5");
}

void Prep3H2LBEMF(){
  TIMSK2 |= (1 << TOIE2); //Enable TOV2 interrupt for sampling BEMF
  previousState = UNKNOWN;
  BEMFPhase = SENSE1;

  TIMSK0 &= ~(1 << TOIE0); //Disable any other interrupts
  TIMSK1 &= ~(1 << TOIE1);
  timer++;
  Serial.println("prep 6");
}

void DisableTimers(){
  TIMSK2 &= ~(1 << TOIE2); //Enable TOV2 interrupt for sampling BEMF
  previousState = UNKNOWN;
  TIMSK0 &= ~(1 << TOIE0); //Disable any other interrupts
  TIMSK1 &= ~(1 << TOIE1);
  timer++;
  Serial.println("disable");
}

bool startup(){
  Prep1H2LBEMF();
  pwmVal = 25;
  uint16_t delay = 625;
  uint32_t startTime = timer;

  while(true){
      Serial.print("s ");
      Serial.print(commutation);
      Serial.print("\n");
    switch(commutation){
      case(0):
        L1Pwm = pwmVal - deadtime + brake; //High
        L2Pwm = lowMax;
        L3Pwm = lowMin;

        H1Pwm = pwmVal; //High
        H2Pwm = highMin;
        H3Pwm = highMin;
        
        if(hasRisen){ //Check if BEMF crossing has occurred
          hasRisen = 0; //Reset BEMF crossing flag
          commutation = 1; //Prepare for next commutation step
          Prep1H3LBEMF();
          commutationStartTime = timer; //Record when the last BEMF zeor crossing occurred
          return 1; //Indicate that the open loop startup was successful
        }
        if(timer - startTime > delay){ //Check if no BEMF crossing has been detected within a certian time frame
          startTime = timer; //Reset timer for BEMF crossing
          commutation = 1; //Prepare to attempt next commutation
          Prep1H3LBEMF();
          delay -= 5; //Decrease time frame for open loop BEMF commutation
        }

        //AH BL BEMF C rise ##########i think all the interupt preparations are one phase ahead
        break;
      case(1):
        L1Pwm = pwmVal - deadtime + brake; //High
        L2Pwm = lowMin;
        L3Pwm = lowMax;

        H1Pwm = pwmVal; //High
        H2Pwm = highMin;
        H3Pwm = highMin;

        if(hasFallen){
          hasFallen = 0;
          commutation = 2;
          Prep2H3LBEMF();
          commutationStartTime = timer;
          return 1;
        }
        if(timer - startTime > delay){
          startTime = timer;
          commutation = 2;
          Prep2H3LBEMF();
          delay -= 5;
        }
        //AH CL BEMF B fall
        break;
      case(2):
        L1Pwm = lowMin; //High
        L2Pwm = pwmVal - deadtime + brake;
        L3Pwm = lowMax;

        H1Pwm = highMin; //High
        H2Pwm = pwmVal;
        H3Pwm = highMin;

        if(hasRisen){
          hasRisen = 0;
          commutation = 3;
          Prep2H1LBEMF();
          commutationStartTime = timer;
          return 1;
        }
        if(timer - startTime > delay){
          startTime = timer;
          commutation = 3;
          Prep2H1LBEMF();
          delay -= 5;
        }
        //BH CL BEMF A rise
        break;
      case(3):
        L1Pwm = lowMax; //High
        L2Pwm = pwmVal - deadtime + brake;
        L3Pwm = lowMin;

        H1Pwm = highMin; //High
        H2Pwm = pwmVal;
        H3Pwm = highMin;

        if(hasFallen){
          hasFallen = 0;
          commutation = 4;
          Prep3H1LBEMF();
          commutationStartTime = timer;
          return 1;
        }
        if(timer - startTime > delay){
          startTime = timer;
          commutation = 4;
          Prep3H1LBEMF();
          delay -= 5;
        }
        //BH AL BEMF c fall
        break;
      case(4):
        L1Pwm = lowMax; //High
        L2Pwm = lowMin;
        L3Pwm = pwmVal - deadtime + brake;

        H1Pwm = highMin; //High
        H2Pwm = highMin;
        H3Pwm = pwmVal;

        if(hasRisen){
          hasRisen = 0;
          commutation = 5;
          Prep3H2LBEMF();
          commutationStartTime = timer;
          return 1;
        }
        if(timer - startTime > delay){
          startTime = timer;
          commutation = 5;
          Prep3H2LBEMF();
          delay -= 5;
        }
        //CH AL BEMF B rise
        break;
      case(5):
        L1Pwm = lowMin; //High
        L2Pwm = lowMax;
        L3Pwm = pwmVal - deadtime + brake;

        H1Pwm = highMin; //High
        H2Pwm = highMin;
        H3Pwm = pwmVal;

        if(hasFallen){
          hasFallen = 0;
          commutation = 0;
          Prep1H2LBEMF();
          commutationStartTime = timer;
          return 1;
        }
        if(timer - startTime > delay){
          startTime = timer;
          commutation = 0;
          Prep1H2LBEMF();
          delay -= 5;
        }
        //CH BL BEMF A fall
        break;
      default: //All low
        L1Pwm = lowMin; //High
        L2Pwm = lowMin;
        L3Pwm = lowMin;

        H1Pwm = highMin; //High
        H2Pwm = highMin;
        H3Pwm = highMin;
    }
    if(delay < 10){ //Check if the max time to obtain a BEMF zero crossing during open loop startup has passed
      //DisableTimers();
      return 0; //Startup has failed
    }
  }
}

//Commutation for when the throttle is applied
void activeCommutate(){

  switch(commutation){
    case(0):
      L1Pwm = pwmVal - deadtime + brake; //High
      L2Pwm = lowMax;
      L3Pwm = lowMin;

      H1Pwm = pwmVal; //High
      H2Pwm = highMin;
      H3Pwm = highMin;
      if(hasRisen){ //Check if BEMF zero crossing has occurred
        hasRisen = 0; //Reset BEMF zero crossing flag
        commutation = 1; //Prepare for next commutation
        Prep1H2LBEMF();
        commutationStartTime = timer; //Record when the last BEMF zero crossing occurred
      }
      if(timer - commutationStartTime > 15625) //Check if there has been no BEMF detected in the last 500ms
        running = false; //We can safely assume the motor has stopped rotating
      //AH BL BEMF C rise
      break;
    case(1):
      L1Pwm = pwmVal - deadtime + brake; //High
      L2Pwm = lowMin;
      L3Pwm = lowMax;

      H1Pwm = pwmVal; //High
      H2Pwm = highMin;
      H3Pwm = highMin;
      if(hasFallen){
        hasFallen = 0;
        commutation = 2;
        Prep1H3LBEMF();
        commutationStartTime = timer; //Record when the last BEMF zero crossing occurred
      }
      if(timer - commutationStartTime > 15625) //Check if there has been no BEMF detected in the last 500ms
        running = false; //We can safely assume the motor has stopped rotating
      //AH CL BEMF B fall
      break;
    case(2):
      L1Pwm = lowMin; //High
      L2Pwm = pwmVal - deadtime + brake;
      L3Pwm = lowMax;

      H1Pwm = highMin; //High
      H2Pwm = pwmVal;
      H3Pwm = highMin;
      if(hasRisen){
        hasRisen = 0;
        commutation = 3;
        Prep2H3LBEMF();
        commutationStartTime = timer; //Record when the last BEMF zero crossing occurred
      }
      if(timer - commutationStartTime > 15625) //Check if there has been no BEMF detected in the last 500ms
        running = false; //We can safely assume the motor has stopped rotating
      //BH CL BEMF A rise
      break;
    case(3):
      L1Pwm = lowMax; //High
      L2Pwm = pwmVal - deadtime + brake;
      L3Pwm = lowMin;

      H1Pwm = highMin; //High
      H2Pwm = pwmVal;
      H3Pwm = highMin;
      if(hasFallen){
        hasFallen = 0;
        commutation = 4;
        Prep2H1LBEMF();
        commutationStartTime = timer; //Record when the last BEMF zero crossing occurred
      }
      if(timer - commutationStartTime > 15625) //Check if there has been no BEMF detected in the last 500ms
        running = false; //We can safely assume the motor has stopped rotating
      //BH AL BEMF c fall
      break;
    case(4):
      L1Pwm = lowMax; //High
      L2Pwm = lowMin;
      L3Pwm = pwmVal - deadtime + brake;

      H1Pwm = highMin; //High
      H2Pwm = highMin;
      H3Pwm = pwmVal;
      if(hasRisen){
        hasRisen = 0;
        commutation = 5;
        Prep3H1LBEMF();
        commutationStartTime = timer; //Record when the last BEMF zero crossing occurred
      }
      if(timer - commutationStartTime > 15625) //Check if there has been no BEMF detected in the last 500ms
        running = false; //We can safely assume the motor has stopped rotating
      //CH AL BEMF B rise
      break;
    case(5):
      L1Pwm = lowMin; //High
      L2Pwm = lowMax;
      L3Pwm = pwmVal - deadtime + brake;

      H1Pwm = highMin; //High
      H2Pwm = highMin;
      H3Pwm = pwmVal;
      if(hasFallen){
        hasFallen = 0;
        commutation = 0;
        Prep3H2LBEMF();
        commutationStartTime = timer; //Record when the last BEMF zero crossing occurred
      }
      if(timer - commutationStartTime > 15625) //Check if there has been no BEMF detected in the last 500ms
        running = false; //We can safely assume the motor has stopped rotating
      //CH BL BEMF A fall
      break;
    default: //All low
      L1Pwm = lowMin; //High
      L2Pwm = lowMin;
      L3Pwm = lowMin;

      H1Pwm = highMin; //High
      H2Pwm = highMin;
      H3Pwm = highMin;
  }
}

//We need to track the BEMF crossings even if there is no throttle so that we can immediately start the commutation process if the throttle is raised before the motor completely stops
void passiveCommutate(){
  switch(commutation){
    case(0):
      L1Pwm = deadtime + brake; //High
      L2Pwm = lowMax;
      L3Pwm = lowMin;

      H1Pwm = highMin; //High
      H2Pwm = highMin;
      H3Pwm = highMin;
      if(hasRisen){ //Check if BEMF zero crossing has occurred
        hasRisen = 0; //Reset BEMF zero crossing flag
        commutation = 1; //Prepare for next commutation
        Prep1H2LBEMF();
        commutationStartTime = timer; //Record when the last BEMF zero crossing occurred
      }
      if(timer - commutationStartTime > 15625) //Check if there has been no BEMF detected in the last 500ms
        running = false; //We can safely assume the motor has stopped rotating
      //AH BL BEMF C rise
      break;
    case(1):
      L1Pwm = deadtime + brake; //High
      L2Pwm = lowMin;
      L3Pwm = lowMax;

      H1Pwm = highMin; //High
      H2Pwm = highMin;
      H3Pwm = highMin;
      if(hasFallen){
        hasFallen = 0;
        commutation = 2;
        Prep1H3LBEMF();
        commutationStartTime = timer; //Record when the last BEMF zero crossing occurred
      }
      if(timer - commutationStartTime > 15625)
        running = false;
      //AH CL BEMF B fall
      break;
    case(2):
      L1Pwm = lowMin; //High
      L2Pwm = deadtime + brake;
      L3Pwm = lowMax;

      H1Pwm = highMin; //High
      H2Pwm = highMin;
      H3Pwm = highMin;
      if(hasRisen){
        hasRisen = 0;
        commutation = 3;
        Prep2H3LBEMF();
        commutationStartTime = timer; //Record when the last BEMF zero crossing occurred
      }
      if(timer - commutationStartTime > 15625)
        running = false;
      //BH CL BEMF A rise
      break;
    case(3):
      L1Pwm = lowMax; //High
      L2Pwm = deadtime + brake;
      L3Pwm = lowMin;

      H1Pwm = highMin; //High
      H2Pwm = highMin;
      H3Pwm = highMin;
      if(hasFallen){
        hasFallen = 0;
        commutation = 4;
        Prep2H1LBEMF();
        commutationStartTime = timer; //Record when the last BEMF zero crossing occurred
      }
      if(timer - commutationStartTime > 15625)
        running = false;
      //BH AL BEMF c fall
      break;
    case(4):
      L1Pwm = lowMax; //High
      L2Pwm = lowMin;
      L3Pwm = deadtime + brake;

      H1Pwm = highMin; //High
      H2Pwm = highMin;
      H3Pwm = highMin;
      if(hasRisen){
        hasRisen = 0;
        commutation = 5;
        Prep3H1LBEMF();
        commutationStartTime = timer; //Record when the last BEMF zero crossing occurred
      }
      if(timer - commutationStartTime > 15625)
        running = false;
      //CH AL BEMF B rise
      break;
    case(5):
      L1Pwm = lowMin; //High
      L2Pwm = lowMax;
      L3Pwm = deadtime + brake;

      H1Pwm = highMin; //High
      H2Pwm = highMin;
      H3Pwm = highMin;
      if(hasFallen){
        hasFallen = 0;
        commutation = 0;
        Prep3H2LBEMF();
        commutationStartTime = timer; //Record when the last BEMF zero crossing occurred
      }
      if(timer - commutationStartTime > 15625)
        running = false;
      //CH BL BEMF A fall
      break;
    default: //All low
      L1Pwm = lowMin; //High
      L2Pwm = lowMin;
      L3Pwm = lowMin;

      H1Pwm = highMin; //High
      H2Pwm = highMin;
      H3Pwm = highMin;
  }
}

ISR (TIMER0_OVF_vect){
  uint8_t in = (PINC >> BEMFPhase) & 1;
  if(in != previousState && previousState != UNKNOWN){ //Check if a BEMF rise or a fall has occurred
    if(in == HIGH){
      uint8_t total = 0;
      for(int i = 0 ;i < 10; i++)
        total +=(PINC >> BEMFPhase) & 1;
      if(total == 9){
        hasRisen = 1; //Set a flag to indicate to the main loop
      }
      else
        return;
    }
    else if(in == LOW){
      uint8_t total = 0;
      for(int i = 0 ;i < 10; i++)
        total +=(PINC >> BEMFPhase) & 1;
      if(total == 0){
        hasFallen = 1;
      }
      else
        return;
    }
    else{
      return;
    }
    previousState = UNKNOWN;
    TIMSK0 &= ~(1 << TOIE0); //disable this interrupt from triggering again
    Serial.println("T0 disable");
    return;
  }
  previousState = in;
  timer++;
}

ISR (TIMER1_OVF_vect){
  uint8_t in = (PINC >> BEMFPhase) & 1;
  if(in != previousState && previousState != UNKNOWN){ //Check if a BEMF rise or a fall has occurred
    if(in == HIGH){
      uint8_t total = 0;
      for(int i = 0 ;i < 10; i++)
        total +=(PINC >> BEMFPhase) & 1;
      if(total == 9){
        hasRisen = 1; //Set a flag to indicate to the main loop
      }
      else
        return;
    }
    else if(in == LOW){
      uint8_t total = 0;
      for(int i = 0 ;i < 10; i++)
        total +=(PINC >> BEMFPhase) & 1;
      if(total == 0){
        hasFallen = 1;
      }
      else
        return;
    }
    else{
      return;
    }
    previousState = UNKNOWN;
    TIMSK1 &= ~(1 << TOIE1); //disable this interrupt from triggering again
    Serial.println("T1 disable");
    return;
  }
  previousState = in;
  timer++;
}

ISR (TIMER2_OVF_vect){
  uint8_t in = (PINC >> BEMFPhase) & 1;
  if(in != previousState && previousState != UNKNOWN){ //Check if a BEMF rise or a fall has occurred
    if(in == HIGH){
      uint8_t total = 0;
      for(int i = 0 ;i < 10; i++)
        total +=(PINC >> BEMFPhase) & 1;
      if(total == 9){
        hasRisen = 1; //Set a flag to indicate to the main loop
      }
      else
        return;
    }
    else if(in == LOW){
      uint8_t total = 0;
      for(int i = 0 ;i < 10; i++)
        total +=(PINC >> BEMFPhase) & 1;
      if(total == 0){
        hasFallen = 1;
      }
      else
        return;
    }
    else{
      return;
    }
    previousState = UNKNOWN;
    TIMSK2 &= ~(1 << TOIE2); //disable this interrupt from triggering again
    Serial.println("T2 disable");
    return;
  }
  previousState = in;
  timer++;
}

void setup() {
  noInterrupts();
  ADCSRA &= ~((1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2)); //Clear ADC prescaler bits
  ADCSRA |= (1 << ADPS0) | (1 << ADPS2); //Set adc prescaler to 32, 20 microsecond analogRead
  
  TCCR0A = 0; //Set timer config to 0
  TCCR0B = 0;
  //Phase correct PWM
  TCCR0A |= (1 << COM0A1); //low side not inverted
  
  TCCR0A |= (1 << COM0B0);
  TCCR0A |= (1 << COM0B1); //invert High side

  TCCR0A |= (1 << WGM00);
  TCCR0B = (1 << CS00); //prescaler divided by 1, 31.37255khz frequency


  TCCR1A = 0; //Set timer config to 0
  TCCR1B = 0;
  //Phase correct PWM
  TCCR1A |= (1 << COM1A1); //low side not inverted
  
  TCCR1A |= (1 << COM1B0);
  TCCR1A |= (1 << COM1B1); //invert High side
  TCCR1A |= (1 << WGM10);
  TCCR1B = (1 << CS10); //prescaler divided by 1, 31.37255khz frequency

  TCCR2A = 0; //Set timer config to 0
  TCCR2B = 0;
  //Phase correct PWM
  TCCR2A |= (1 << COM2A1); //low side not inverted
  
  TCCR2A |= (1 << COM2B0);
  TCCR2A |= (1 << COM2B1); //invert High side
  TCCR2A |= (1 << WGM20);
  TCCR2B = (1 << CS20); //prescaler divided by 1, 31.37255khz frequency

  OCR0A = 0x00; //zero duty cycle pwm
  OCR0B = 0x00; //zero duty cycle pwm
  OCR1A = 0x00; //zero duty cycle pwm
  OCR1B = 0x00; //zero duty cycle pwm
  OCR2A = 0x00; //zero duty cycle pwm
  OCR2B = 0x00; //zero duty cycle pwm

  DDRB = B00001110; //Set PORTB 1, 2 and 3 to output
  DDRD = B01101100; //Set PORTD 5 and 6 to output
  DDRC = B00000000; //Set PORTC to input
  interrupts();
  Serial.begin(9600);
  digitalWrite(2, HIGH);
  DisableTimers();
  pinMode(A1, INPUT_PULLUP);
  pinMode(A2, INPUT_PULLUP);
  pinMode(A3, INPUT_PULLUP);
  // put your setup code here, to run once:
}

void getThrottle(){
  throttle = analogRead(A7);
  /*if(throttle > 860){
    pwmVal = 255;
  }
  else if(throttle > 180)
    pwmVal = map(throttle, 180, 860, 0, 255);
  else
    pwmVal = 0;*/
  
  //        Serial.println(throttle);
  if(throttle >= 15){
    pwmVal = map(throttle, 15, 1023, 0, 255);
  }
  else{
    pwmVal = 0;
  }
  
  if(pwmVal < 15){//prevent pulses of less than a microsecond (specified in ir2136 datasheet)
    pwmVal = 0;
    deadtime = 0;
    brake = 200;
  }
  else if(pwmVal > highMax - deadtime){
    deadtime = 0;
    brake = 0;
  }
  else
    brake = 0;
}

void loop() {
  
  //Serial.println(timer);
  getThrottle();
  if(pwmVal > 20 && !running){
    running = startup();
  }
  /*if(running && pwmVal >= 15){
    activeCommutate();
  }
  else if(running && pwmVal < 15){
    passiveCommutate();
  }*/
  Serial.print("m ");
  Serial.print(timer);
  Serial.print("\n");
  //Serial.println(pwmVal);

  /*Serial.print(PINC & (1 << SENSE1));
  Serial.print(PINC & (1 << SENSE2));
  Serial.print(PINC & (1 << SENSE3));
  Serial.println();*/
  
  /*Serial.print((PINC >> SENSE3) & 1);
  Serial.print((PINC >> SENSE2) & 1);
  Serial.print((PINC >> SENSE1) & 1);
  Serial.print("\n");*/
  // put your main code here, to run repeatedly:
}
 
/*To enable the TOVn interrupt, the TOIE0 bit must be set to 1 in the TIMSKn register*/